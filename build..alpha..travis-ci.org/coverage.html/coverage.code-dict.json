{"/home/travis/build/npmtest/node-npmtest-express-request-proxy/test.js":"/* istanbul instrument in package npmtest_express_request_proxy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-request-proxy/lib.npmtest_express_request_proxy.js":"/* istanbul instrument in package npmtest_express_request_proxy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_express_request_proxy = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_express_request_proxy = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-express-request-proxy/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-express-request-proxy && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_express_request_proxy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_express_request_proxy\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_express_request_proxy.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_express_request_proxy.rollup.js'] =\n            local.assetsDict['/assets.npmtest_express_request_proxy.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_express_request_proxy.__dirname +\n                    '/lib.npmtest_express_request_proxy.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-request-proxy/node_modules/express-request-proxy/index.js":"module.exports = require('./lib/proxy');\n","/home/travis/build/npmtest/node-npmtest-express-request-proxy/node_modules/express-request-proxy/lib/proxy.js":"var _ = require('lodash'),\n  async = require('async'),\n  debug = require('debug')('express-request-proxy'),\n  // through2 = require('through2'),\n  zlib = require('zlib'),\n  request = require('request'),\n  requestOptions = require('./request-options'),\n  is = require('type-is');\n\nrequire('simple-errors');\n\nvar discardApiResponseHeaders = ['set-cookie', 'content-length'];\n\n// Headers from the original API response that should be preserved and sent along\n// in cached responses.\nvar headersToPreserveInCache = ['content-type'];\n\nmodule.exports = function(options) {\n  options = _.defaults(options || {}, {\n    ensureAuthenticated: false,\n    cache: null,\n    cacheMaxAge: 0,\n    userAgent: 'express-request-proxy',\n    cacheHttpHeader: 'Express-Request-Proxy-Cache',\n    cacheKeyFn: null,\n    timeout: 5000,\n    maxRedirects: 5,\n    gzip: true,\n    originalQuery: false\n  });\n\n  return function(req, res, next) {\n    var method = req.method.toUpperCase();\n\n    // Allow for a global cache to be specified on the parent Express app\n    if (!options.cache) {\n      options.cache = req.app.settings.cache;\n    }\n\n    if (!req.ext) {\n      req.ext = {};\n    }\n\n    req.ext.requestHandler = 'express-request-proxy';\n\n    if (options.ensureAuthenticated === true) {\n      // Look for the isAuthenticated function which PassportJS defines. Some other authentication\n      // method can be used, but it needs to define the isAuthenicated function.\n      if (req.ext.isAuthenticated !== true) {\n        debug('user is not authenticated');\n        return next(Error.http(401, 'User must be authenticated to invoke this API endpoint'));\n      }\n    }\n\n    if (method.toUpperCase() === 'GET' && options.cache && options.cacheMaxAge > 0) {\n      if (!options.cache) return next(new Error('No cache provider configured'));\n\n      return proxyViaCache(req, res, next);\n    }\n\n    makeApiCall(req, res, next);\n  };\n\n  function makeApiCall(req, res, next) {\n    var apiRequestOptions;\n    try {\n      apiRequestOptions = requestOptions(req, options);\n    } catch (err) {\n      debug('error building request options %s', err.stack);\n      return next(Error.http(400, err.message));\n    }\n\n    debug('making %s call to %s', apiRequestOptions.method, apiRequestOptions.url);\n\n    // If the req has a body, pipe it into the proxy request\n    var apiRequest;\n    if (is.hasBody(req)) {\n      debug('piping req body to remote http endpoint');\n      apiRequest = req.pipe(request(apiRequestOptions));\n    } else {\n      apiRequest = request(apiRequestOptions);\n    }\n\n    apiRequest.on('error', function(err) {\n      unhandledApiError(err, next);\n    });\n\n    // Defer piping the response until the response event so we can\n    // check the status code.\n    apiRequest.on('response', function(resp) {\n      // Do not attempt to apply transforms to error responses\n      if (resp.statusCode >= 400) {\n        debug('Received error %s from %s', resp.statusCode, apiRequestOptions.url);\n        return apiRequest.pipe(res);\n      }\n\n      if (_.isArray(options.transforms)) {\n        apiRequest = applyTransforms(apiRequest, options.transforms, resp.headers);\n      }\n\n      // Need to explicitly passthrough headers, otherwise they will get lost\n      // in the transforms pipe.\n      for (var key in resp.headers) {\n        if (_.includes(discardApiResponseHeaders, key) === false) {\n          res.set(key, resp.headers[key]);\n        }\n      }\n\n      apiRequest.pipe(res);\n    });\n  }\n\n  function proxyViaCache(req, res, next) {\n    var apiRequestOptions;\n    try {\n      apiRequestOptions = requestOptions(req, options);\n    } catch (err) {\n      debug('error building request options %s', err.stack);\n      return next(Error.http(400, err.message));\n    }\n\n    var cacheKey;\n    if (_.isFunction(options.cacheKeyFn)) {\n      cacheKey = options.cacheKeyFn(req, apiRequestOptions);\n    } else {\n      cacheKey = apiRequestOptions.url;\n    }\n\n    // Try retrieving from the cache\n    debug('checking if key %s exists in cache', cacheKey);\n    options.cache.exists(cacheKey, function(err, exists) {\n      if (err) return next(err);\n\n      debug('api response exists in cache=%s', exists);\n      if (exists) {\n        debug('api response exists in cache');\n        return pipeToResponseFromCache(cacheKey, req, res, next);\n      }\n\n      debug('key %s not in cache', cacheKey);\n\n      res.set('Cache-Control', 'max-age=' + options.cacheMaxAge);\n      res.set(options.cacheHttpHeader, 'miss');\n\n      debug('making %s request to %s', apiRequestOptions.method, apiRequestOptions.url);\n\n      var apiRequest = request(apiRequestOptions);\n      apiRequest.on('error', function(_err) {\n        debug('error making api call');\n        unhandledApiError(_err, next);\n      });\n\n      // Defer piping the response until the response event so we can\n      // check the status code.\n      apiRequest.on('response', function(resp) {\n        // Don't cache error responses. Just pipe the response right on out.\n        if (resp.statusCode !== 200) {\n          return apiRequest.pipe(res);\n        }\n\n        // If the api response is gzip encoded, unzip it before attempting\n        // any transforms.\n        if (resp.headers['content-encoding'] === 'gzip') {\n          apiRequest = apiRequest.pipe(zlib.createGunzip());\n        }\n\n        // Store the headers as a separate cache entry\n        var headersToKeep = _.pick(resp.headers, headersToPreserveInCache);\n\n        if (_.isArray(options.transforms)) {\n          apiRequest = applyTransforms(apiRequest, options.transforms, headersToKeep);\n        }\n\n        // This needs to happen after the call to applyTransforms so transforms\n        // have the opportunity to modify the contentType.\n        _.forOwn(headersToKeep, function(value, key) {\n          debug('setting header %s to %s', key, value);\n          res.set(key, value);\n        });\n\n        // Store the headers as a separate cache entry\n        if (_.isEmpty(headersToKeep) === false) {\n          debug('writing original headers to cache');\n          options.cache.setex(cacheKey + '__headers',\n            options.cacheMaxAge,\n            JSON.stringify(headersToKeep));\n        }\n\n        debug('cache api response for %s seconds', options.cacheMaxAge);\n\n        apiRequest.pipe(options.cache.writeThrough(cacheKey, options.cacheMaxAge))\n          .pipe(res);\n      });\n    });\n  }\n\n  function setHeadersFromCache(cacheKey, res, callback) {\n    // get the ttl of the main object and fetch the headers in parallel.\n    async.parallel({\n      ttl: function(cb) {\n        options.cache.ttl(cacheKey, cb);\n      },\n      headers: function(cb) {\n        options.cache.get(cacheKey + '__headers', function(err, value) {\n          // restore the headers\n          var headers = {};\n          if (value) {\n            try {\n              headers = JSON.parse(value);\n            } catch (jsonError) {\n              debug('can\\'t parse headers as json');\n            }\n          }\n          cb(null, headers);\n        });\n      }\n    }, function(err, results) {\n      if (err) return callback(err);\n\n      _.forOwn(results.headers, function(value, key) {\n        res.set(key, value);\n      });\n\n      // Set a custom header indicating that the response was served from cache.\n      res.set(options.cacheHttpHeader, 'hit');\n\n      debug('setting max-age to remaining TTL of %s', results.ttl);\n      res.set('Cache-Control', 'max-age=' + results.ttl);\n      callback();\n    });\n  }\n\n  function pipeToResponseFromCache(cacheKey, req, res, next) {\n    debug('getting TTL of cached api response');\n\n    setHeadersFromCache(cacheKey, res, function(err) {\n      if (err) return next(err);\n\n      if (_.isFunction(options.cache.readStream)) {\n        options.cache.readStream(cacheKey).pipe(res);\n        return;\n      }\n      options.cache.get(cacheKey, function(_err, data) {\n        if (_err) return next(_err);\n        res.end(data);\n      });\n    });\n  }\n\n  function unhandledApiError(err, next) {\n    debug('unhandled API error: %s', err.code);\n    if (err.code === 'ETIMEDOUT' || err.code === 'ESOCKETTIMEDOUT') {\n      return next(Error.http(408, 'API call timed out'));\n    }\n    return next(err);\n  }\n\n  // function apiErrorResponse(statusCode, apiRequest, next) {\n  //   var error = '';\n  //   apiRequest.pipe(through2(function(chunk, enc, cb) {\n  //     error += chunk;\n  //     cb();\n  //   }, function() {\n  //     return next(Error.http(statusCode, error));\n  //   }));\n  // }\n\n  function applyTransforms(stream, transforms, headers) {\n    // Pipe the stream through each transform in sequence\n    transforms.forEach(function(transform) {\n      debug('applying transform %s', transform.name);\n      if (transform.contentType) {\n        headers['Content-Type'] = transform.contentType;\n      }\n\n      stream = stream.pipe(transform.transform());\n    });\n\n    return stream;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-express-request-proxy/node_modules/express-request-proxy/lib/request-options.js":"var parseUrl = require('url').parse;\nvar formatUrl = require('url').format;\nvar _ = require('lodash');\nvar querystring = require('querystring');\nvar pathToRegexp = require('path-to-regexp');\n\nvar BLOCK_HEADERS = ['host', 'cookie'];\nvar CACHE_HEADERS = ['if-none-match', 'if-modified-since'];\n// var PASSTHROUGH_HEADERS = ['authorization', 'accepts', 'if-none-match', 'if-modified-since'];\n\n// Returns an options object that can be fed to the request module.\nmodule.exports = function(req, options, limits) {\n  var requestOptions = _.pick(options, 'method', 'timeout', 'maxRedirects');\n\n  // If an explicit method was not specified on the options, then use the\n  // method of the inbound request to the proxy.\n  if (!requestOptions.method) {\n    requestOptions.method = req.method;\n  }\n\n  // Ensure that passed in options for timeout and maxRedirects cannot exceed\n  // the platform imposed limits (if defined).\n  if (_.isObject(limits) === true) {\n    if (_.isNumber(limits.timeout)) {\n      if (_.isNumber(options.timeout) === false || options.timeout > limits.timeout) {\n        requestOptions.timeout = limits.timeout;\n      }\n    }\n    if (_.isNumber(limits.maxRedirects)) {\n      if (_.isNumber(options.maxRedirects) === false ||\n        options.maxRedirects > limits.maxRedirects) {\n        requestOptions.maxRedirects = limits.maxRedirects;\n      }\n    }\n  }\n\n  // Extend the incoming query with any additional parameters specified in the options\n  if (_.isObject(options.query)) {\n    _.extend(req.query, options.query);\n  }\n\n  var parsedUrl = parseUrl(options.url);\n\n  // Compile the path expression of the originUrl\n  var compiledPath = pathToRegexp.compile(parsedUrl.path);\n\n  // Need to decode the path as splat params like 'path/*' will result in an encoded forward slash\n  // like http://someapi.com/v1/path1%2Fpath2.\n  var pathname = decodeURIComponent(compiledPath(_.extend({}, req.params, options.params)));\n\n  // Substitute the actual values using both those from the incoming\n  // params as well as those configured in the options. Values in the\n  // options take precedence.\n\n  // If options.originalQuery is true, ignore the above and just\n  // use the original raw querystring as the search\n\n  requestOptions.url = formatUrl(_.extend({\n    protocol: parsedUrl.protocol,\n    host: parsedUrl.host,\n    pathname: pathname\n  }, options.originalQuery ?\n    {search: req.url.replace(/^.+\\?/, '')} :\n    {query: _.extend({}, querystring.parse(parsedUrl.query), req.query, options.query)}\n  ));\n\n  requestOptions.headers = {};\n\n  // Passthrough headers\n  _.each(req.headers, function(value, key) {\n    if (shouldPassthroughHeader(key)) {\n      requestOptions.headers[key] = value;\n    }\n  });\n\n  // Forward the IP of the originating request. This is de-facto proxy behavior.\n  if (req.ip) {\n    requestOptions.headers['x-forwarded-for'] = req.ip;\n  }\n\n  if (req.headers && req.headers.host) {\n    var hostSplit = req.headers.host.split(':');\n    var host = hostSplit[0];\n    var port = hostSplit[1];\n\n    if (port) {\n      requestOptions.headers['x-forwarded-port'] = port;\n    }\n\n    requestOptions.headers['x-forwarded-host'] = host;\n  }\n\n  requestOptions.headers['x-forwarded-proto'] = req.secure ? 'https' : 'http';\n\n  // Default to accepting gzip encoding\n  if (!requestOptions.headers['accept-encoding']) {\n    requestOptions.headers['accept-encoding'] = 'gzip';\n  }\n\n  // Inject additional headers from the options\n  if (_.isObject(options.headers)) {\n    _.extend(requestOptions.headers, options.headers);\n  }\n\n  // Override the user-agent\n  if (options.userAgent) {\n    requestOptions.headers['user-agent'] = options.userAgent;\n  }\n\n  return requestOptions;\n\n  function shouldPassthroughHeader(header) {\n    if (_.includes(BLOCK_HEADERS, header) === true) return false;\n    if (options.cache && _.includes(CACHE_HEADERS, header) === true) return false;\n\n    return true;\n  }\n};\n"}